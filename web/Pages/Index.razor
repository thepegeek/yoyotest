@page "/"
@using web.Models
@inject web.Services.YoyoTimer YoyoTimer
@inject web.Services.YoyoDataService YoyoDataService
@inject web.Data.Repository<Athlete> AthleteRepository

<div class="container">
    <div class="row justify-content-center">
        <span class="font-weight-bold">YoYo Test</span>
    </div>
    <div class="row col-lg-8 col-md-8 justify-content-center offset-lg-2 offset-md-2 mt-3">
        <div class="row justify-content-center">
            <div class="circle">
                @if (Started)
                {
                    <div id="stats">
                        <div class="mt-3">
                            @($"Level {currentShuttle?.SpeedLevel}")
                        </div>
                        <div>
                            @($"Shuttle {currentShuttle?.ShuttleNo}")
                        </div>
                        <div>
                            @($"{currentShuttle?.Speed} km/h")
                        </div>
                    </div>
                }
                else
                {
                    <button id="playButton" class="mt-4 ml-5 oi oi-media-play" @onclick="Start">
                    </button>
                }

            </div>
        </div>
    </div>
    <div class="row mt-4 col-lg-8 col-md-8 justify-content-center offset-lg-2 offset-md-2">
        <div class="col-4">
            <div class="text-center">
                NEXT SHUTTLE
            </div>
            <div class="text-center">
                @($"{currentShuttleTimeLeft.ToString(@"mm\:ss")} s")
            </div>
        </div>
        <div class="col-4">
            <div class="text-center border-left border-right">
                TOTAL TIME
            </div>
            <div class="text-center border-left border-right">
                @($"{totalTime.ToString(@"hh\:mm")} m")
            </div>
        </div>
        <div class="col-4">
            <div class="text-center">
                TOTAL DISTANCE
            </div>
            <div class="text-center">
                @($"{currentShuttle?.AccumulatedShuttleDistance} m")
            </div>
        </div>
    </div>
    <div class="row mt-4 col-lg-8 col-md-8 justify-content-center offset-lg-3 offset-md-2">
        @for (int i = 0; i < AthleteRepository.Data.Count; i++)
        {
            <div class="col-6">
                <p>
                    @($"{i+1}. {AthleteRepository.Data[i].Name}")
                </p>
            </div>
            <div class="col-6">
                <button class="btn btn-warning" disabled="@(AthleteRepository.Data[i].Warned)">Warn</button>
                <button class="btn btn-danger">Stop</button>
            </div>

        }
    </div>
</div>
@code {
    public bool Started { get; set; } = false;
    private TimeSpan totalTime { get; set; }
    private TimeSpan currentShuttleTimeLeft { get; set; }
    private int accumulatedDistance { get; set; } = 0;
    private Shuttle currentShuttle { get; set; }

    private void Start()
    {
        YoyoTimer.SetTimer(1000, true);
        YoyoTimer.OnElapsed += async delegate
        {
            await Tick();
        };
        YoyoDataService.OnShuttleChanged += async (newShuttle) =>
        {

            await UpdateShuttle(newShuttle);
            Console.WriteLine("incoming shuttle");
        };
        YoyoDataService.Start();
        Started = true;
    }

    private async Task UpdateShuttle(Shuttle newShuttle)
    {
        currentShuttle = newShuttle;
        currentShuttleTimeLeft = TimeSpan.ParseExact(currentShuttle.CommulativeTime, @"mm\:ss", System.Globalization.CultureInfo.InvariantCulture,
                                              System.Globalization.TimeSpanStyles.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task Tick()
    {
        totalTime = totalTime.Add(new TimeSpan(0, 0, 1));
        currentShuttleTimeLeft = currentShuttleTimeLeft.Add(new TimeSpan(0, 0, -1));

        await InvokeAsync(StateHasChanged);
    }



}
